def call_service(service, msgType, json_dict):	
	global dict_msgs	
	rospy.wait_for_service(service)		
	add_two_ints = rospy.ServiceProxy(service, msgType)
	response = add_two_ints(dict_msgs[json_dict['time']])	
	rospy.loginfo('The service has been called.')
	json_dict['response'] = message_converter.convert_ros_message_to_dictionary(response)
	dict_msgs[json_dict['time']] = response


def get_oracle_verdict(json_dict):
	global ws_lock, ws
	ws_lock.acquire() #lock
		
	ws.send(json.dumps(json_dict))
	msg = ws.recv()
		
	ws_lock.release() #unlock
	return msg

def publish_error(topic_or_service, name, json_dict):
	global dict_msgs
	error = MonitorError()
	if topic_or_service == 'service':
		error.m_service = name
	else:
		error.m_topic = name
	error.m_time = json_dict['time']
	error.m_property = json_dict['spec']
	error.m_content = str(dict_msgs[json_dict['time']])
	pub_error.publish(error)
	error=True

def publish_verdict(verdict):
	verdict_msg = String()
	verdict_msg.data = verdict
	pub_verdict.publish(verdict_msg)

