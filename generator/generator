#!/usr/bin/env python

# MIT License
#
# Copyright (c) [2019] [Angelo Ferrando]
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os
import sys
import yaml
import argparse

from generator import *

def main(argv):
    parser = argparse.ArgumentParser(
        description='this is a Python program to generate for monitoring ROS topics',
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('--config_file',
        help='YAML configuration file',
        default = './config.yaml',
        metavar='STRING')
    args = parser.parse_args() # maybe in the future we will need more arguments, for now it's just one

    with open(args.config_file, 'r') as stream: # open the config file for the generator
        try:
            config = yaml.safe_load(stream) # load the config file
            if 'monitors' in config: # check if the ROS key is present
                ids = []
                for monitor in config['monitors']:
                    if 'id' not in monitor['monitor'] or 'topics' not in monitor['monitor'] or 'log' not in monitor['monitor']:
                        print('Each monitor in the configuration file must contain the id, when, log and the list of the topics fields')
                        return
                    if 'oracle' in monitor['monitor']  and ('port' not in monitor['monitor']['oracle'] or 'url' not in monitor['monitor']['oracle'] or 'action' not in monitor['monitor']['oracle']):
                        print('Url, port and action must be specified inside the oracle')
                        return
                    for topic_with_types_and_action in monitor['monitor']['topics']:
                        if 'name' not in topic_with_types_and_action or 'type' not in topic_with_types_and_action or 'action' not in topic_with_types_and_action:
                            print('Each topic needs a name, a type and an action')
                            return
                        if topic_with_types_and_action['action'] not in ['log', 'filter']:
                            print('The actions available for the topics are: log, filter')
                            return
                        if ('side' not in topic_with_types_and_action or 'oracle' not in monitor['monitor']) and topic_with_types_and_action['action'] == 'filter':
                            print('In order to filter the wrong messages, the monitor has to be ONLINE and in the middle of the communication. To have this, the \'side\' and \'oracle\' fields have to be given')
                            return
                    if 'oracle' in monitor['monitor']:
                        url =  monitor['monitor']['oracle']['url']
                        port =  monitor['monitor']['oracle']['port']
                        oracle_action =  monitor['monitor']['oracle']['action']
                        if not isinstance(url, str) or not isinstance(port, int):
                            print('url must be a string and port must be an integer')
                            return
                        if oracle_action not in ['nothing', 'modify']:
                            print('The actions available for the oracle are: nothing, modify')
                            return
                    else:
                        url = None
                        port = None
                        oracle_action = None
                    ids.append(monitor['monitor']['id'])
                    if 'silent' in monitor['monitor'] and monitor['monitor']['silent']:
                        silent = True
                    else:
                        silent = False
                    create_monitor(monitor['monitor']['id'], monitor['monitor']['topics'], monitor['monitor']['log'], url, port, oracle_action, silent)
                create_launch_file(ids)
        except yaml.YAMLError as exc:
            print(exc)

if __name__ == '__main__':
    main(sys.argv)
